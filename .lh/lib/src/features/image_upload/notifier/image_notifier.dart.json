{
    "sourceFile": "lib/src/features/image_upload/notifier/image_notifier.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1709863646073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709864012233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+import 'dart:io' show File;\r\n+import 'dart:typed_data';\r\n+\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+import 'package:firebase_storage/firebase_storage.dart';\r\n+import 'package:hooks_riverpod/hooks_riverpod.dart';\r\n+import 'package:image/image.dart' as img;\r\n+import 'package:monami/state/constants/firebase_collection.dart';\r\n+import 'package:monami/src/features/image_upload/constants/constants.dart';\r\n+import 'package:monami/src/features/image_upload/exception/could_not_build_thumbnail.dart';\r\n+import 'package:monami/src/features/image_upload/extension/get_collectionname_from_file_type.dart';\r\n+import 'package:monami/src/features/image_upload/extension/get_image_data_aspect_ratio.dart';\r\n+import 'package:monami/src/features/image_upload/models/file_type.dart';\r\n+import 'package:monami/src/features/image_upload/typedef/is_loading.dart';\r\n+import 'package:monami/state/post/models/post_key.dart';\r\n+import 'package:monami/state/post/models/post_payload.dart';\r\n+import 'package:monami/state/post_settings/models/post_settings.dart';\r\n+import 'package:uuid/uuid.dart';\r\n+import 'package:video_thumbnail/video_thumbnail.dart';\r\n+\r\n+class ImageUploadNotifier extends StateNotifier<IsLoading> {\r\n+  ImageUploadNotifier() : super(false);\r\n+\r\n+  set isLoading(bool value) => state = value;\r\n+\r\n+  Future<bool> upload({\r\n+    required File file,\r\n+    required FileType fileType,\r\n+    required String message,\r\n+    required Map<PostSetting, bool> postSettings,\r\n+    required String userId,\r\n+    required String category,\r\n+  }) async {\r\n+    isLoading = true;\r\n+\r\n+    late Uint8List thumbnailUint8List;\r\n+\r\n+    switch (fileType) {\r\n+      case FileType.image:\r\n+        // create a thumbnail out of the file\r\n+        final fileAsImage = img.decodeImage(file.readAsBytesSync());\r\n+        if (fileAsImage == null) {\r\n+          isLoading = false;\r\n+          throw const CouldNotBuildThumbnailException();\r\n+        }\r\n+        // create thumbnail\r\n+        final thumbnail = img.copyResize(\r\n+          fileAsImage,\r\n+          width: Constants.imageThumbnailWidth,\r\n+        );\r\n+        final thumbnailData = img.encodeJpg(thumbnail);\r\n+        thumbnailUint8List = Uint8List.fromList(thumbnailData);\r\n+        break;\r\n+      case FileType.video:\r\n+        final thumb = await VideoThumbnail.thumbnailData(\r\n+          video: file.path,\r\n+          imageFormat: ImageFormat.JPEG,\r\n+          maxHeight: Constants.videoThumbnailMaxHeight,\r\n+          quality: Constants.videoThumbnailQuality,\r\n+        );\r\n+        if (thumb == null) {\r\n+          isLoading = false;\r\n+          throw const CouldNotBuildThumbnailException();\r\n+        } else {\r\n+          thumbnailUint8List = thumb;\r\n+        }\r\n+        break;\r\n+    }\r\n+\r\n+    // calculate the aspect ratio\r\n+\r\n+    final thumbnailAspectRatio = await thumbnailUint8List.getAspectRatio();\r\n+\r\n+    // calculate references\r\n+\r\n+    final fileName = const Uuid().v4();\r\n+\r\n+    // create references to the thumbnail and the image itself\r\n+\r\n+    final thumbnailRef = FirebaseStorage.instance\r\n+        .ref()\r\n+        .child(userId)\r\n+        .child(FirebaseCollectionName.thumbnail)\r\n+        .child(fileName);\r\n+\r\n+    final originalFileRef = FirebaseStorage.instance\r\n+        .ref()\r\n+        .child(userId)\r\n+        .child(fileType.collectionName)\r\n+        .child(fileName);\r\n+\r\n+    try {\r\n+      // upload the thumbnail\r\n+      final thumbnailUploadTask =\r\n+          await thumbnailRef.putData(thumbnailUint8List);\r\n+      final thumbnailStorageId = thumbnailUploadTask.ref.name;\r\n+\r\n+      // upload the original image\r\n+      final originalFileUploadTask = await originalFileRef.putFile(file);\r\n+      final originalFileStorageId = originalFileUploadTask.ref.name;\r\n+\r\n+      // upload the post itself\r\n+      final postPayload = PostPayLoad(\r\n+          userId: userId,\r\n+          message: message,\r\n+          thumbnailUrl: await thumbnailRef.getDownloadURL(),\r\n+          fileUrl: await originalFileRef.getDownloadURL(),\r\n+          fileType: fileType,\r\n+          fileName: fileName,\r\n+          aspectRatio: thumbnailAspectRatio,\r\n+          postSettings: postSettings,\r\n+          thumbnailStorageId: thumbnailStorageId,\r\n+          originalFileStorageId: originalFileStorageId,\r\n+          postStatus: \"Not Approved\",\r\n+          category: category);\r\n+      await FirebaseFirestore.instance\r\n+          .collection(FirebaseCollectionName.posts)\r\n+          .add(postPayload);\r\n+      return true;\r\n+    } catch (_) {\r\n+      return false;\r\n+    } finally {\r\n+      isLoading = false;\r\n+    }\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1709863646073,
            "name": "Commit-0",
            "content": "import 'dart:io' show File;\r\nimport 'dart:typed_data';\r\n\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:firebase_storage/firebase_storage.dart';\r\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\r\nimport 'package:image/image.dart' as img;\r\nimport 'package:monami/state/constants/firebase_collection.dart';\r\nimport 'package:monami/src/features/image_upload/constants/constants.dart';\r\nimport 'package:monami/src/features/image_upload/exception/could_not_build_thumbnail.dart';\r\nimport 'package:monami/src/features/image_upload/extension/get_collectionname_from_file_type.dart';\r\nimport 'package:monami/src/features/image_upload/extension/get_image_data_aspect_ratio.dart';\r\nimport 'package:monami/src/features/image_upload/models/file_type.dart';\r\nimport 'package:monami/src/features/image_upload/typedef/is_loading.dart';\r\nimport 'package:monami/state/post/models/post_key.dart';\r\nimport 'package:monami/state/post/models/post_payload.dart';\r\nimport 'package:monami/state/post_settings/models/post_settings.dart';\r\nimport 'package:uuid/uuid.dart';\r\nimport 'package:video_thumbnail/video_thumbnail.dart';\r\n\r\nclass ImageUploadNotifier extends StateNotifier<IsLoading> {\r\n  ImageUploadNotifier() : super(false);\r\n\r\n  set isLoading(bool value) => state = value;\r\n\r\n  Future<bool> upload({\r\n    required File file,\r\n    required FileType fileType,\r\n    required String message,\r\n    required Map<PostSetting, bool> postSettings,\r\n    required String userId,\r\n  }) async {\r\n    isLoading = true;\r\n\r\n    late Uint8List thumbnailUint8List;\r\n\r\n    switch (fileType) {\r\n      case FileType.image:\r\n        // create a thumbnail out of the file\r\n        final fileAsImage = img.decodeImage(file.readAsBytesSync());\r\n        if (fileAsImage == null) {\r\n          isLoading = false;\r\n          throw const CouldNotBuildThumbnailException();\r\n        }\r\n        // create thumbnail\r\n        final thumbnail = img.copyResize(\r\n          fileAsImage,\r\n          width: Constants.imageThumbnailWidth,\r\n        );\r\n        final thumbnailData = img.encodeJpg(thumbnail);\r\n        thumbnailUint8List = Uint8List.fromList(thumbnailData);\r\n        break;\r\n      case FileType.video:\r\n        final thumb = await VideoThumbnail.thumbnailData(\r\n          video: file.path,\r\n          imageFormat: ImageFormat.JPEG,\r\n          maxHeight: Constants.videoThumbnailMaxHeight,\r\n          quality: Constants.videoThumbnailQuality,\r\n        );\r\n        if (thumb == null) {\r\n          isLoading = false;\r\n          throw const CouldNotBuildThumbnailException();\r\n        } else {\r\n          thumbnailUint8List = thumb;\r\n        }\r\n        break;\r\n    }\r\n\r\n    // calculate the aspect ratio\r\n\r\n    final thumbnailAspectRatio = await thumbnailUint8List.getAspectRatio();\r\n\r\n    // calculate references\r\n\r\n    final fileName = const Uuid().v4();\r\n\r\n    // create references to the thumbnail and the image itself\r\n\r\n    final thumbnailRef = FirebaseStorage.instance\r\n        .ref()\r\n        .child(userId)\r\n        .child(FirebaseCollectionName.thumbnail)\r\n        .child(fileName);\r\n\r\n    final originalFileRef = FirebaseStorage.instance\r\n        .ref()\r\n        .child(userId)\r\n        .child(fileType.collectionName)\r\n        .child(fileName);\r\n\r\n    try {\r\n      // upload the thumbnail\r\n      final thumbnailUploadTask =\r\n          await thumbnailRef.putData(thumbnailUint8List);\r\n      final thumbnailStorageId = thumbnailUploadTask.ref.name;\r\n\r\n      // upload the original image\r\n      final originalFileUploadTask = await originalFileRef.putFile(file);\r\n      final originalFileStorageId = originalFileUploadTask.ref.name;\r\n\r\n      // upload the post itself\r\n      final postPayload = PostPayLoad(\r\n        userId: userId,\r\n        message: message,\r\n        thumbnailUrl: await thumbnailRef.getDownloadURL(),\r\n        fileUrl: await originalFileRef.getDownloadURL(),\r\n        fileType: fileType,\r\n        fileName: fileName,\r\n        aspectRatio: thumbnailAspectRatio,\r\n        postSettings: postSettings,\r\n        thumbnailStorageId: thumbnailStorageId,\r\n        originalFileStorageId: originalFileStorageId,\r\n        postStatus: PostKey.postStatus,\r\n      );\r\n      await FirebaseFirestore.instance\r\n          .collection(FirebaseCollectionName.posts)\r\n          .add(postPayload);\r\n      return true;\r\n    } catch (_) {\r\n      return false;\r\n    } finally {\r\n      isLoading = false;\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}