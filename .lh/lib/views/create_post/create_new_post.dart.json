{
    "sourceFile": "lib/views/create_post/create_new_post.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1709864572308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709864616129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_hooks/flutter_hooks.dart';\r\n+import 'package:hooks_riverpod/hooks_riverpod.dart';\r\n+import 'package:monami/src/features/auth/providers/user_id_provider.dart';\r\n+import 'package:monami/src/features/image_upload/models/file_type.dart';\r\n+import 'package:monami/src/features/image_upload/models/thumbnail_request.dart';\r\n+import 'package:monami/src/features/image_upload/providers/image_uploader_provider.dart';\r\n+import 'package:monami/state/post_settings/models/post_settings.dart';\r\n+import 'package:monami/state/post_settings/providers/post_settings_provider.dart';\r\n+import 'package:monami/views/components/file_thumbnail.dart';\r\n+import 'package:monami/views/constants/strings.dart';\r\n+import 'package:monami/views/onboarding/components/constants/app_color.dart';\r\n+\r\n+class CreateNewPostView extends StatefulHookConsumerWidget {\r\n+  final File fileToPost;\r\n+  final FileType fileType;\r\n+\r\n+  const CreateNewPostView({\r\n+    Key? key,\r\n+    required this.fileToPost,\r\n+    required this.fileType,\r\n+  }) : super(key: key);\r\n+\r\n+  @override\r\n+  ConsumerState<ConsumerStatefulWidget> createState() =>\r\n+      _CreateNewPostViewState();\r\n+}\r\n+\r\n+class _CreateNewPostViewState extends ConsumerState<CreateNewPostView> {\r\n+  String  selectedItem = \"Mobile Developer\";\r\n+    List<String> dropdownItems = [\r\n+    'Product Designer',\r\n+    'Backend Developer',\r\n+    'Frontend Developer',\r\n+    'Mobile Developer'\r\n+  ];\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final thumbnailRequest = ThumbnailRequest(\r\n+      file: widget.fileToPost,\r\n+      fileType: widget.fileType,\r\n+    );\r\n+    final postSettings = ref.watch(postSettingProvider);\r\n+    final postController = useTextEditingController();\r\n+    final isPostButtonEnabled = useState(false);\r\n+    useEffect(() {\r\n+      void listener() {\r\n+        isPostButtonEnabled.value = postController.text.isNotEmpty;\r\n+      }\r\n+\r\n+      postController.addListener(listener);\r\n+      return () {\r\n+        postController.removeListener(listener);\r\n+      };\r\n+    }, [postController]);\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: const Text(\r\n+          Strings.createNewPost,\r\n+        ),\r\n+        actions: [\r\n+          IconButton(\r\n+            icon: const Icon(Icons.send),\r\n+            onPressed: isPostButtonEnabled.value\r\n+                ? () async {\r\n+                    // get the user id first\r\n+                    final userId = ref.read(userIdProvider);\r\n+                    print(userId!);\r\n+                    if (userId == null) {\r\n+                      return;\r\n+                    }\r\n+                    final message = postController.text;\r\n+                    final isUploaded =\r\n+                        await ref.read(imageUploaderProvider.notifier).upload(\r\n+                              file: widget.fileToPost,\r\n+                              fileType: widget.fileType,\r\n+                              message: message,\r\n+                              postSettings: postSettings,\r\n+                              userId: userId,\r\n+                              category: selectedItem,\r\n+                            );\r\n+                    if (isUploaded && mounted) {\r\n+                      Navigator.of(context).pop();\r\n+                    }\r\n+                  }\r\n+                : null,\r\n+          )\r\n+        ],\r\n+      ),\r\n+      body: SingleChildScrollView(\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+          children: [\r\n+            // thumbnail\r\n+            FileThumbnailView(\r\n+              thumbnailRequest: thumbnailRequest,\r\n+            ),\r\n+            Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: Strings.pleaseWriteYourMessageHere,\r\n+                ),\r\n+                autofocus: true,\r\n+                maxLines: null,\r\n+                controller: postController,\r\n+              ),\r\n+            ),\r\n+             Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child:  Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        Text(\r\n+          \"Category\"\r\n+      \r\n+        ),\r\n+      \r\n+        SizedBox(\r\n+          height: 70,\r\n+          child: DropdownButton<String>(\r\n+            alignment: Alignment.center,\r\n+            underline: Container(\r\n+              height: 60,\r\n+              decoration: BoxDecoration(\r\n+                  borderRadius: BorderRadius.circular(12),\r\n+                  border: Border.all(\r\n+                    width: 1,\r\n+                    color: AppColor.bgColor,\r\n+                  )),\r\n+            ),\r\n+            isExpanded: true,\r\n+            value: widget.selectedItem,\r\n+            onChanged: widget.onChanged,\r\n+\r\n+            // (newValue) {\r\n+            //   setState(() {\r\n+            //     widget.selectedItem = newValue!;\r\n+            //   });\r\n+            // },\r\n+            items: dropdownItems.map<DropdownMenuItem<String>>((value) {\r\n+              return DropdownMenuItem<String>(\r\n+                value: value,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(8.0),\r\n+                  child: Text(value),\r\n+                ),\r\n+              );\r\n+            }).toList(),\r\n+          \r\n+        ),\r\n+            ),\r\n+            ...PostSetting.values.map(\r\n+              (postSetting) => ListTile(\r\n+                title: Text(postSetting.title),\r\n+                subtitle: Text(postSetting.description),\r\n+                trailing: Switch(\r\n+                  value: postSettings[postSetting] ?? false,\r\n+                  onChanged: (isOn) {\r\n+                    ref.read(postSettingProvider.notifier).setSetting(\r\n+                          postSetting,\r\n+                          isOn,\r\n+                        );\r\n+                  },\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1709864637616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_hooks/flutter_hooks.dart';\r\n+import 'package:hooks_riverpod/hooks_riverpod.dart';\r\n+import 'package:monami/src/features/auth/providers/user_id_provider.dart';\r\n+import 'package:monami/src/features/image_upload/models/file_type.dart';\r\n+import 'package:monami/src/features/image_upload/models/thumbnail_request.dart';\r\n+import 'package:monami/src/features/image_upload/providers/image_uploader_provider.dart';\r\n+import 'package:monami/state/post_settings/models/post_settings.dart';\r\n+import 'package:monami/state/post_settings/providers/post_settings_provider.dart';\r\n+import 'package:monami/views/components/file_thumbnail.dart';\r\n+import 'package:monami/views/constants/strings.dart';\r\n+import 'package:monami/views/onboarding/components/constants/app_color.dart';\r\n+\r\n+class CreateNewPostView extends StatefulHookConsumerWidget {\r\n+  final File fileToPost;\r\n+  final FileType fileType;\r\n+\r\n+  const CreateNewPostView({\r\n+    Key? key,\r\n+    required this.fileToPost,\r\n+    required this.fileType,\r\n+  }) : super(key: key);\r\n+\r\n+  @override\r\n+  ConsumerState<ConsumerStatefulWidget> createState() =>\r\n+      _CreateNewPostViewState();\r\n+}\r\n+\r\n+class _CreateNewPostViewState extends ConsumerState<CreateNewPostView> {\r\n+  String  selectedItem = \"Mobile Developer\";\r\n+    List<String> dropdownItems = [\r\n+    'Product Designer',\r\n+    'Backend Developer',\r\n+    'Frontend Developer',\r\n+    'Mobile Developer'\r\n+  ];\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final thumbnailRequest = ThumbnailRequest(\r\n+      file: widget.fileToPost,\r\n+      fileType: widget.fileType,\r\n+    );\r\n+    final postSettings = ref.watch(postSettingProvider);\r\n+    final postController = useTextEditingController();\r\n+    final isPostButtonEnabled = useState(false);\r\n+    useEffect(() {\r\n+      void listener() {\r\n+        isPostButtonEnabled.value = postController.text.isNotEmpty;\r\n+      }\r\n+\r\n+      postController.addListener(listener);\r\n+      return () {\r\n+        postController.removeListener(listener);\r\n+      };\r\n+    }, [postController]);\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: const Text(\r\n+          Strings.createNewPost,\r\n+        ),\r\n+        actions: [\r\n+          IconButton(\r\n+            icon: const Icon(Icons.send),\r\n+            onPressed: isPostButtonEnabled.value\r\n+                ? () async {\r\n+                    // get the user id first\r\n+                    final userId = ref.read(userIdProvider);\r\n+                    print(userId!);\r\n+                    if (userId == null) {\r\n+                      return;\r\n+                    }\r\n+                    final message = postController.text;\r\n+                    final isUploaded =\r\n+                        await ref.read(imageUploaderProvider.notifier).upload(\r\n+                              file: widget.fileToPost,\r\n+                              fileType: widget.fileType,\r\n+                              message: message,\r\n+                              postSettings: postSettings,\r\n+                              userId: userId,\r\n+                              category: selectedItem,\r\n+                            );\r\n+                    if (isUploaded && mounted) {\r\n+                      Navigator.of(context).pop();\r\n+                    }\r\n+                  }\r\n+                : null,\r\n+          )\r\n+        ],\r\n+      ),\r\n+      body: SingleChildScrollView(\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+          children: [\r\n+            // thumbnail\r\n+            FileThumbnailView(\r\n+              thumbnailRequest: thumbnailRequest,\r\n+            ),\r\n+            Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: Strings.pleaseWriteYourMessageHere,\r\n+                ),\r\n+                autofocus: true,\r\n+                maxLines: null,\r\n+                controller: postController,\r\n+              ),\r\n+            ),\r\n+             Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child:  Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        Text(\r\n+          \"Category\"\r\n+      \r\n+        ),\r\n+      \r\n+        SizedBox(\r\n+          height: 70,\r\n+          child: DropdownButton<String>(\r\n+            alignment: Alignment.center,\r\n+            underline: Container(\r\n+              height: 60,\r\n+              decoration: BoxDecoration(\r\n+                  borderRadius: BorderRadius.circular(12),\r\n+                  border: Border.all(\r\n+                    width: 1,\r\n+                    color: AppColor.bgColor,\r\n+                  )),\r\n+            ),\r\n+            isExpanded: true,\r\n+            value: selectedItem,\r\n+            onChanged: \r\n+\r\n+            (newValue) {\r\n+              setState(() {\r\n+                selectedItem = newValue!;\r\n+              });\r\n+            },\r\n+            items: dropdownItems.map<DropdownMenuItem<String>>((value) {\r\n+              return DropdownMenuItem<String>(\r\n+                value: value,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(8.0),\r\n+                  child: Text(value),\r\n+                ),\r\n+              );\r\n+            }).toList(),\r\n+          \r\n+        ),\r\n+            ),\r\n+            ...PostSetting.values.map(\r\n+              (postSetting) => ListTile(\r\n+                title: Text(postSetting.title),\r\n+                subtitle: Text(postSetting.description),\r\n+                trailing: Switch(\r\n+                  value: postSettings[postSetting] ?? false,\r\n+                  onChanged: (isOn) {\r\n+                    ref.read(postSettingProvider.notifier).setSetting(\r\n+                          postSetting,\r\n+                          isOn,\r\n+                        );\r\n+                  },\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1709864682723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import 'dart:io';\r\n+\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_hooks/flutter_hooks.dart';\r\n+import 'package:hooks_riverpod/hooks_riverpod.dart';\r\n+import 'package:monami/src/features/auth/providers/user_id_provider.dart';\r\n+import 'package:monami/src/features/image_upload/models/file_type.dart';\r\n+import 'package:monami/src/features/image_upload/models/thumbnail_request.dart';\r\n+import 'package:monami/src/features/image_upload/providers/image_uploader_provider.dart';\r\n+import 'package:monami/state/post_settings/models/post_settings.dart';\r\n+import 'package:monami/state/post_settings/providers/post_settings_provider.dart';\r\n+import 'package:monami/views/components/file_thumbnail.dart';\r\n+import 'package:monami/views/constants/strings.dart';\r\n+import 'package:monami/views/onboarding/components/constants/app_color.dart';\r\n+\r\n+class CreateNewPostView extends StatefulHookConsumerWidget {\r\n+  final File fileToPost;\r\n+  final FileType fileType;\r\n+\r\n+  const CreateNewPostView({\r\n+    Key? key,\r\n+    required this.fileToPost,\r\n+    required this.fileType,\r\n+  }) : super(key: key);\r\n+\r\n+  @override\r\n+  ConsumerState<ConsumerStatefulWidget> createState() =>\r\n+      _CreateNewPostViewState();\r\n+}\r\n+\r\n+class _CreateNewPostViewState extends ConsumerState<CreateNewPostView> {\r\n+  String  selectedItem = \"Mobile Developer\";\r\n+    List<String> dropdownItems = [\r\n+    'Product Designer',\r\n+    'Backend Developer',\r\n+    'Frontend Developer',\r\n+    'Mobile Developer'\r\n+  ];\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final thumbnailRequest = ThumbnailRequest(\r\n+      file: widget.fileToPost,\r\n+      fileType: widget.fileType,\r\n+    );\r\n+    final postSettings = ref.watch(postSettingProvider);\r\n+    final postController = useTextEditingController();\r\n+    final isPostButtonEnabled = useState(false);\r\n+    useEffect(() {\r\n+      void listener() {\r\n+        isPostButtonEnabled.value = postController.text.isNotEmpty;\r\n+      }\r\n+\r\n+      postController.addListener(listener);\r\n+      return () {\r\n+        postController.removeListener(listener);\r\n+      };\r\n+    }, [postController]);\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: const Text(\r\n+          Strings.createNewPost,\r\n+        ),\r\n+        actions: [\r\n+          IconButton(\r\n+            icon: const Icon(Icons.send),\r\n+            onPressed: isPostButtonEnabled.value\r\n+                ? () async {\r\n+                    // get the user id first\r\n+                    final userId = ref.read(userIdProvider);\r\n+                    print(userId!);\r\n+                    if (userId == null) {\r\n+                      return;\r\n+                    }\r\n+                    final message = postController.text;\r\n+                    final isUploaded =\r\n+                        await ref.read(imageUploaderProvider.notifier).upload(\r\n+                              file: widget.fileToPost,\r\n+                              fileType: widget.fileType,\r\n+                              message: message,\r\n+                              postSettings: postSettings,\r\n+                              userId: userId,\r\n+                              category: selectedItem,\r\n+                            );\r\n+                    if (isUploaded && mounted) {\r\n+                      Navigator.of(context).pop();\r\n+                    }\r\n+                  }\r\n+                : null,\r\n+          )\r\n+        ],\r\n+      ),\r\n+      body: SingleChildScrollView(\r\n+        child: Column(\r\n+          crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+          children: [\r\n+            // thumbnail\r\n+            FileThumbnailView(\r\n+              thumbnailRequest: thumbnailRequest,\r\n+            ),\r\n+            Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: Strings.pleaseWriteYourMessageHere,\r\n+                ),\r\n+                autofocus: true,\r\n+                maxLines: null,\r\n+                controller: postController,\r\n+              ),\r\n+            ),\r\n+             Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child:  Column(\r\n+      crossAxisAlignment: CrossAxisAlignment.start,\r\n+      children: [\r\n+        Text(\r\n+          \"Category\"\r\n+      \r\n+        ),\r\n+      \r\n+        SizedBox(\r\n+          height: 70,\r\n+          child: DropdownButton<String>(\r\n+            alignment: Alignment.center,\r\n+            underline: Container(\r\n+              height: 60,\r\n+              decoration: BoxDecoration(\r\n+                  borderRadius: BorderRadius.circular(12),\r\n+                  border: Border.all(\r\n+                    width: 1,\r\n+                    color: AppColor.bgColor,\r\n+                  )),\r\n+            ),\r\n+            isExpanded: true,\r\n+            value: selectedItem,\r\n+            onChanged: \r\n+\r\n+            (newValue) {\r\n+              setState(() {\r\n+                selectedItem = newValue!;\r\n+              });\r\n+            },\r\n+            items: dropdownItems.map<DropdownMenuItem<String>>((value) {\r\n+              return DropdownMenuItem<String>(\r\n+                value: value,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(8.0),\r\n+                  child: Text(value),\r\n+                ),\r\n+              );\r\n+            }).toList(),\r\n+          \r\n+        ),\r\n+        )])\r\n+            ...PostSetting.values.map(\r\n+              (postSetting) => ListTile(\r\n+                title: Text(postSetting.title),\r\n+                subtitle: Text(postSetting.description),\r\n+                trailing: Switch(\r\n+                  value: postSettings[postSetting] ?? false,\r\n+                  onChanged: (isOn) {\r\n+                    ref.read(postSettingProvider.notifier).setSetting(\r\n+                          postSetting,\r\n+                          isOn,\r\n+                        );\r\n+                  },\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1709864693422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n               );\r\n             }).toList(),\r\n           \r\n         ),\r\n-        )])\r\n+        )])),\r\n             ...PostSetting.values.map(\r\n               (postSetting) => ListTile(\r\n                 title: Text(postSetting.title),\r\n                 subtitle: Text(postSetting.description),\r\n"
                },
                {
                    "date": 1709864792009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,10 @@\n       _CreateNewPostViewState();\r\n }\r\n \r\n class _CreateNewPostViewState extends ConsumerState<CreateNewPostView> {\r\n-  String selectedItem = \"Mobile Developer\";\r\n-  List<String> dropdownItems = [\r\n-    'Product Designer',\r\n-    'Backend Developer',\r\n-    'Frontend Developer',\r\n-    'Mobile Developer'\r\n-  ];\r\n+  String selectedItem = \"All\";\r\n+  List<String> dropdownItems = ['Shoes', 'Dress', 'Caps', 'Clothes'];\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     final thumbnailRequest = ThumbnailRequest(\r\n       file: widget.fileToPost,\r\n"
                },
                {
                    "date": 1709865073862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,47 +102,47 @@\n                 maxLines: null,\r\n                 controller: postController,\r\n               ),\r\n             ),\r\n-            Padding(\r\n-                padding: const EdgeInsets.all(8.0),\r\n-                child: Column(\r\n-                    crossAxisAlignment: CrossAxisAlignment.start,\r\n-                    children: [\r\n-                      Text(\"Category\"),\r\n-                      SizedBox(\r\n-                        height: 70,\r\n-                        child: DropdownButton<String>(\r\n-                          alignment: Alignment.center,\r\n-                          underline: Container(\r\n-                            height: 60,\r\n-                            decoration: BoxDecoration(\r\n-                                borderRadius: BorderRadius.circular(12),\r\n-                                border: Border.all(\r\n-                                  width: 1,\r\n-                                  color: AppColor.bgColor,\r\n-                                )),\r\n-                          ),\r\n-                          isExpanded: true,\r\n-                          value: selectedItem,\r\n-                          onChanged: (newValue) {\r\n-                            setState(() {\r\n-                              selectedItem = newValue!;\r\n-                            });\r\n-                          },\r\n-                          items: dropdownItems\r\n-                              .map<DropdownMenuItem<String>>((value) {\r\n-                            return DropdownMenuItem<String>(\r\n-                              value: value,\r\n-                              child: Padding(\r\n-                                padding: const EdgeInsets.all(8.0),\r\n-                                child: Text(value),\r\n-                              ),\r\n-                            );\r\n-                          }).toList(),\r\n-                        ),\r\n-                      )\r\n-                    ])),\r\n+            // Padding(\r\n+            //     padding: const EdgeInsets.all(8.0),\r\n+            //     child: Column(\r\n+            //         crossAxisAlignment: CrossAxisAlignment.start,\r\n+            //         children: [\r\n+            //           Text(\"Category\"),\r\n+            //           SizedBox(\r\n+            //             height: 70,\r\n+            //             child: DropdownButton<String>(\r\n+            //               alignment: Alignment.center,\r\n+            //               underline: Container(\r\n+            //                 height: 60,\r\n+            //                 decoration: BoxDecoration(\r\n+            //                     borderRadius: BorderRadius.circular(12),\r\n+            //                     border: Border.all(\r\n+            //                       width: 1,\r\n+            //                       color: AppColor.bgColor,\r\n+            //                     )),\r\n+            //               ),\r\n+            //               isExpanded: true,\r\n+            //               value: selectedItem,\r\n+            //               onChanged: (newValue) {\r\n+            //                 setState(() {\r\n+            //                   selectedItem = newValue!;\r\n+            //                 });\r\n+            //               },\r\n+            //               items: dropdownItems\r\n+            //                   .map<DropdownMenuItem<String>>((value) {\r\n+            //                 return DropdownMenuItem<String>(\r\n+            //                   value: value,\r\n+            //                   child: Padding(\r\n+            //                     padding: const EdgeInsets.all(8.0),\r\n+            //                     child: Text(value),\r\n+            //                   ),\r\n+            //                 );\r\n+            //               }).toList(),\r\n+            //             ),\r\n+            //           )\r\n+            //         ])),\r\n             ...PostSetting.values.map(\r\n               (postSetting) => ListTile(\r\n                 title: Text(postSetting.title),\r\n                 subtitle: Text(postSetting.description),\r\n"
                }
            ],
            "date": 1709864572308,
            "name": "Commit-0",
            "content": "import 'dart:io';\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_hooks/flutter_hooks.dart';\r\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\r\nimport 'package:monami/src/features/auth/providers/user_id_provider.dart';\r\nimport 'package:monami/src/features/image_upload/models/file_type.dart';\r\nimport 'package:monami/src/features/image_upload/models/thumbnail_request.dart';\r\nimport 'package:monami/src/features/image_upload/providers/image_uploader_provider.dart';\r\nimport 'package:monami/state/post_settings/models/post_settings.dart';\r\nimport 'package:monami/state/post_settings/providers/post_settings_provider.dart';\r\nimport 'package:monami/views/components/file_thumbnail.dart';\r\nimport 'package:monami/views/constants/strings.dart';\r\nimport 'package:monami/views/onboarding/components/constants/app_color.dart';\r\n\r\nclass CreateNewPostView extends StatefulHookConsumerWidget {\r\n  final File fileToPost;\r\n  final FileType fileType;\r\n\r\n  const CreateNewPostView({\r\n    Key? key,\r\n    required this.fileToPost,\r\n    required this.fileType,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  ConsumerState<ConsumerStatefulWidget> createState() =>\r\n      _CreateNewPostViewState();\r\n}\r\n\r\nclass _CreateNewPostViewState extends ConsumerState<CreateNewPostView> {\r\n  String  selectedItem = \"Mobile Developer\";\r\n    List<String> dropdownItems = [\r\n    'Product Designer',\r\n    'Backend Developer',\r\n    'Frontend Developer',\r\n    'Mobile Developer'\r\n  ];\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final thumbnailRequest = ThumbnailRequest(\r\n      file: widget.fileToPost,\r\n      fileType: widget.fileType,\r\n    );\r\n    final postSettings = ref.watch(postSettingProvider);\r\n    final postController = useTextEditingController();\r\n    final isPostButtonEnabled = useState(false);\r\n    useEffect(() {\r\n      void listener() {\r\n        isPostButtonEnabled.value = postController.text.isNotEmpty;\r\n      }\r\n\r\n      postController.addListener(listener);\r\n      return () {\r\n        postController.removeListener(listener);\r\n      };\r\n    }, [postController]);\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text(\r\n          Strings.createNewPost,\r\n        ),\r\n        actions: [\r\n          IconButton(\r\n            icon: const Icon(Icons.send),\r\n            onPressed: isPostButtonEnabled.value\r\n                ? () async {\r\n                    // get the user id first\r\n                    final userId = ref.read(userIdProvider);\r\n                    print(userId!);\r\n                    if (userId == null) {\r\n                      return;\r\n                    }\r\n                    final message = postController.text;\r\n                    final isUploaded =\r\n                        await ref.read(imageUploaderProvider.notifier).upload(\r\n                              file: widget.fileToPost,\r\n                              fileType: widget.fileType,\r\n                              message: message,\r\n                              postSettings: postSettings,\r\n                              userId: userId,\r\n                            );\r\n                    if (isUploaded && mounted) {\r\n                      Navigator.of(context).pop();\r\n                    }\r\n                  }\r\n                : null,\r\n          )\r\n        ],\r\n      ),\r\n      body: SingleChildScrollView(\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.stretch,\r\n          children: [\r\n            // thumbnail\r\n            FileThumbnailView(\r\n              thumbnailRequest: thumbnailRequest,\r\n            ),\r\n            Padding(\r\n              padding: const EdgeInsets.all(8.0),\r\n              child: TextField(\r\n                decoration: const InputDecoration(\r\n                  labelText: Strings.pleaseWriteYourMessageHere,\r\n                ),\r\n                autofocus: true,\r\n                maxLines: null,\r\n                controller: postController,\r\n              ),\r\n            ),\r\n             Padding(\r\n              padding: const EdgeInsets.all(8.0),\r\n              child:  Column(\r\n      crossAxisAlignment: CrossAxisAlignment.start,\r\n      children: [\r\n        Text(\r\n          \"Category\"\r\n      \r\n        ),\r\n      \r\n        SizedBox(\r\n          height: 70,\r\n          child: DropdownButton<String>(\r\n            alignment: Alignment.center,\r\n            underline: Container(\r\n              height: 60,\r\n              decoration: BoxDecoration(\r\n                  borderRadius: AppConstant.borderRadius,\r\n                  border: Border.all(\r\n                    width: 1,\r\n                    color: AppColor.bgColor,\r\n                  )),\r\n            ),\r\n            isExpanded: true,\r\n            value: widget.selectedItem,\r\n            onChanged: widget.onChanged,\r\n\r\n            // (newValue) {\r\n            //   setState(() {\r\n            //     widget.selectedItem = newValue!;\r\n            //   });\r\n            // },\r\n            items: dropdownItems.map<DropdownMenuItem<String>>((value) {\r\n              return DropdownMenuItem<String>(\r\n                value: value,\r\n                child: Padding(\r\n                  padding: const EdgeInsets.all(8.0),\r\n                  child: Text(value),\r\n                ),\r\n              );\r\n            }).toList(),\r\n          \r\n        ),\r\n            ),\r\n            ...PostSetting.values.map(\r\n              (postSetting) => ListTile(\r\n                title: Text(postSetting.title),\r\n                subtitle: Text(postSetting.description),\r\n                trailing: Switch(\r\n                  value: postSettings[postSetting] ?? false,\r\n                  onChanged: (isOn) {\r\n                    ref.read(postSettingProvider.notifier).setSetting(\r\n                          postSetting,\r\n                          isOn,\r\n                        );\r\n                  },\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}