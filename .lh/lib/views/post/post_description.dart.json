{
    "sourceFile": "lib/views/post/post_description.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1709872148905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709872202460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:hooks_riverpod/hooks_riverpod.dart';\r\n+import 'package:monami/enums/dart_sorting.dart';\r\n+import 'package:monami/src/features/comments/models/posts_comment_request.dart';\r\n+import 'package:monami/state/post/models/post.dart';\r\n+import 'package:monami/state/post/providers/can_delete_current_post.dart';\r\n+import 'package:monami/state/post/providers/delete_post_provider.dart';\r\n+import 'package:monami/state/post/providers/specific_with_comment.dart';\r\n+import 'package:monami/views/components/animation/models/error_animation.dart';\r\n+import 'package:monami/views/components/animation/models/small_error_animation.dart';\r\n+import 'package:monami/views/components/comments/compact_column_comment.dart';\r\n+import 'package:monami/views/components/likes/likes_button.dart';\r\n+import 'package:monami/views/components/likes/likes_count_view.dart';\r\n+import 'package:monami/views/components/post/post_date_view.dart';\r\n+import 'package:monami/views/components/post/post_display_image_and_message_view.dart';\r\n+import 'package:monami/views/components/post/post_imageor_video.dart';\r\n+import 'package:monami/views/constants/strings.dart';\r\n+import 'package:monami/views/dialogs/alert_dialog_model.dart';\r\n+import 'package:monami/views/dialogs/delete_dialog.dart';\r\n+import 'package:monami/views/post/post_comments_view.dart';\r\n+import 'package:share_plus/share_plus.dart';\r\n+import '../components/animation/models/loadin_animation.dart';\r\n+\r\n+class PostDetailsView extends ConsumerStatefulWidget {\r\n+  final Post post;\r\n+  const PostDetailsView({\r\n+    Key? key,\r\n+    required this.post,\r\n+  }) : super(key: key);\r\n+\r\n+  @override\r\n+  ConsumerState<ConsumerStatefulWidget> createState() =>\r\n+      _PostDetailsViewState();\r\n+}\r\n+\r\n+class _PostDetailsViewState extends ConsumerState<PostDetailsView> {\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    final request = RequestForPostAndComments(\r\n+      postId: widget.post.postId,\r\n+      limit: 2, // at most 3 comments\r\n+      sortByCreatedAt: true,\r\n+      dateSorting: DateSorting.oldestOnTop,\r\n+    );\r\n+\r\n+    // get the actual post together with its comments\r\n+    final postWithComments = ref.watch(\r\n+      specificPostWithCommentsProvider(\r\n+        request,\r\n+      ),\r\n+    );\r\n+\r\n+    // can we delete this post?\r\n+    final canDeletePost = ref.watch(\r\n+      canCurrentUserDeletePostProvider(\r\n+        widget.post,\r\n+      ),\r\n+    );\r\n+\r\n+    return Scaffold(\r\n+      // appBar: AppBar(\r\n+      //   title: const Text(\r\n+      //     Strings.postDetails,\r\n+      //   ),\r\n+      //   actions: [\r\n+      //     // share button is always present\r\n+      //     postWithComments.when(\r\n+      //       data: (postWithComments) {\r\n+      //         return IconButton(\r\n+      //           icon: const Icon(Icons.share),\r\n+      //           onPressed: () {\r\n+      //             final url = postWithComments.post.fileUrl;\r\n+      //             Share.share(\r\n+      //               url,\r\n+      //               subject: Strings.checkOutThisPost,\r\n+      //             );\r\n+      //           },\r\n+      //         );\r\n+      //       },\r\n+      //       error: (error, stackTrace) {\r\n+      //         return const SmallErrorAnimationView();\r\n+      //       },\r\n+      //       loading: () {\r\n+      //         return const Center(\r\n+      //           child: CircularProgressIndicator(),\r\n+      //         );\r\n+      //       },\r\n+      //     ),\r\n+      //     if (postWithComments.post.allowsLikes)\r\n+      //       LikeButton(\r\n+      //         postId: postId,\r\n+      //       ),\r\n+      //     // delete button or no delete button if user cannot delete this post\r\n+      //     // if (canDeletePost.value ?? false)\r\n+      //     //   IconButton(\r\n+      //     //     icon: const Icon(Icons.delete),\r\n+      //     //     onPressed: () async {\r\n+      //     //       final shouldDeletePost = await const DeletedDialog(\r\n+      //     //               titleOfObjectToDelete: Strings.post)\r\n+      //     //           .present(context)\r\n+      //     //           .then((shouldDelete) => shouldDelete ?? false);\r\n+      //     //       if (shouldDeletePost) {\r\n+      //     //         await ref\r\n+      //     //             .read(deletePostProvider.notifier)\r\n+      //     //             .deletePost(post: widget.post);\r\n+      //     //         if (mounted) {\r\n+      //     //           Navigator.of(context).pop();\r\n+      //     //         }\r\n+      //     //       }\r\n+      //     //       // delete the post now\r\n+      //     //     },\r\n+      //     //   )\r\n+      //   ],\r\n+      // ),\r\n+      body: postWithComments.when(\r\n+        data: (postWithComments) {\r\n+          final postId = postWithComments.post.postId;\r\n+          return SingleChildScrollView(\r\n+            child: Column(\r\n+              crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+              children: [\r\n+                InkWell(\r\n+                  onTap: () {\r\n+                    print(\"object\");\r\n+                  },\r\n+                  child: PostImageOrVideoView(\r\n+                    post: postWithComments.post,\r\n+                  ),\r\n+                ),\r\n+                // like and comment buttons\r\n+                Row(\r\n+                  mainAxisAlignment: MainAxisAlignment.start,\r\n+                  children: [\r\n+                    // like button if post allows liking it\r\n+                    if (postWithComments.post.allowsLikes)\r\n+                      LikeButton(\r\n+                        postId: postId,\r\n+                      ),\r\n+                    // comment button if post allows commenting on it\r\n+                    if (postWithComments.post.allowsComments)\r\n+                      IconButton(\r\n+                        icon: const Icon(\r\n+                          Icons.mode_comment_outlined,\r\n+                        ),\r\n+                        onPressed: () {\r\n+                          Navigator.of(context).push(\r\n+                            MaterialPageRoute(\r\n+                              builder: (context) => PostCommentsView(\r\n+                                postId: postId,\r\n+                              ),\r\n+                            ),\r\n+                          );\r\n+                        },\r\n+                      ),\r\n+                  ],\r\n+                ),\r\n+                // post details (shows divider at bottom)\r\n+                PostDisplayNameAndMessageView(\r\n+                  post: postWithComments.post,\r\n+                ),\r\n+                PostDateView(\r\n+                  dateTime: postWithComments.post.createdAt,\r\n+                ),\r\n+                const Padding(\r\n+                  padding: EdgeInsets.all(8.0),\r\n+                  child: Divider(\r\n+                    color: Colors.white70,\r\n+                  ),\r\n+                ),\r\n+                // comments\r\n+                CompactCommentsColumn(\r\n+                  comments: postWithComments.comments,\r\n+                ),\r\n+                // display like count\r\n+                if (postWithComments.post.allowsLikes)\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.all(8.0),\r\n+                    child: Row(\r\n+                      children: [\r\n+                        LikesCountView(\r\n+                          postId: postId,\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+                // add spacing to bottom of screen\r\n+                const SizedBox(\r\n+                  height: 100,\r\n+                ),\r\n+              ],\r\n+            ),\r\n+          );\r\n+        },\r\n+        error: (error, stackTrace) {\r\n+          return const ErrorAnimationView();\r\n+        },\r\n+        loading: () {\r\n+          return const LoadingAnimationView();\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1709872286136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,20 @@\n           return SingleChildScrollView(\r\n             child: Column(\r\n               crossAxisAlignment: CrossAxisAlignment.stretch,\r\n               children: [\r\n+                SizedBox(\r\n+                  height: 70,\r\n+                child: Row(\r\n+                  children: [\r\n+                      if (postWithComments.post.allowsLikes)\r\n+                      LikeButton(\r\n+                        postId: postId,\r\n+                      ),\r\n+                  ],\r\n+                ),\r\n+                ),\r\n+\r\n                 InkWell(\r\n                   onTap: () {\r\n                     print(\"object\");\r\n                   },\r\n"
                },
                {
                    "date": 1709872317103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,10 +118,11 @@\n           return SingleChildScrollView(\r\n             child: Column(\r\n               crossAxisAlignment: CrossAxisAlignment.stretch,\r\n               children: [\r\n-                SizedBox(\r\n+                Container(\r\n                   height: 70,\r\n+                  color: Colors.purple.shade900,\r\n                   child: Row(\r\n                     children: [\r\n                       if (postWithComments.post.allowsLikes)\r\n                         LikeButton(\r\n"
                },
                {
                    "date": 1709872344664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,18 +118,21 @@\n           return SingleChildScrollView(\r\n             child: Column(\r\n               crossAxisAlignment: CrossAxisAlignment.stretch,\r\n               children: [\r\n-                Container(\r\n-                  height: 70,\r\n-                  color: Colors.purple.shade900,\r\n-                  child: Row(\r\n-                    children: [\r\n-                      if (postWithComments.post.allowsLikes)\r\n-                        LikeButton(\r\n-                          postId: postId,\r\n-                        ),\r\n-                    ],\r\n+                Padding(\r\n+                  padding: const EdgeInsets.only(top: 30),\r\n+                  child: Container(\r\n+                    height: 70,\r\n+                    color: Colors.purple.shade900,\r\n+                    child: Row(\r\n+                      children: [\r\n+                        if (postWithComments.post.allowsLikes)\r\n+                          LikeButton(\r\n+                            postId: postId,\r\n+                          ),\r\n+                      ],\r\n+                    ),\r\n                   ),\r\n                 ),\r\n \r\n                 InkWell(\r\n"
                }
            ],
            "date": 1709872148905,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\r\nimport 'package:monami/enums/dart_sorting.dart';\r\nimport 'package:monami/src/features/comments/models/posts_comment_request.dart';\r\nimport 'package:monami/state/post/models/post.dart';\r\nimport 'package:monami/state/post/providers/can_delete_current_post.dart';\r\nimport 'package:monami/state/post/providers/delete_post_provider.dart';\r\nimport 'package:monami/state/post/providers/specific_with_comment.dart';\r\nimport 'package:monami/views/components/animation/models/error_animation.dart';\r\nimport 'package:monami/views/components/animation/models/small_error_animation.dart';\r\nimport 'package:monami/views/components/comments/compact_column_comment.dart';\r\nimport 'package:monami/views/components/likes/likes_button.dart';\r\nimport 'package:monami/views/components/likes/likes_count_view.dart';\r\nimport 'package:monami/views/components/post/post_date_view.dart';\r\nimport 'package:monami/views/components/post/post_display_image_and_message_view.dart';\r\nimport 'package:monami/views/components/post/post_imageor_video.dart';\r\nimport 'package:monami/views/constants/strings.dart';\r\nimport 'package:monami/views/dialogs/alert_dialog_model.dart';\r\nimport 'package:monami/views/dialogs/delete_dialog.dart';\r\nimport 'package:monami/views/post/post_comments_view.dart';\r\nimport 'package:share_plus/share_plus.dart';\r\nimport '../components/animation/models/loadin_animation.dart';\r\n\r\nclass PostDetailsView extends ConsumerStatefulWidget {\r\n  final Post post;\r\n  const PostDetailsView({\r\n    Key? key,\r\n    required this.post,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  ConsumerState<ConsumerStatefulWidget> createState() =>\r\n      _PostDetailsViewState();\r\n}\r\n\r\nclass _PostDetailsViewState extends ConsumerState<PostDetailsView> {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final request = RequestForPostAndComments(\r\n      postId: widget.post.postId,\r\n      limit: 2, // at most 3 comments\r\n      sortByCreatedAt: true,\r\n      dateSorting: DateSorting.oldestOnTop,\r\n    );\r\n\r\n    // get the actual post together with its comments\r\n    final postWithComments = ref.watch(\r\n      specificPostWithCommentsProvider(\r\n        request,\r\n      ),\r\n    );\r\n\r\n    // can we delete this post?\r\n    final canDeletePost = ref.watch(\r\n      canCurrentUserDeletePostProvider(\r\n        widget.post,\r\n      ),\r\n    );\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text(\r\n          Strings.postDetails,\r\n        ),\r\n        actions: [\r\n          // share button is always present\r\n          postWithComments.when(\r\n            data: (postWithComments) {\r\n              return IconButton(\r\n                icon: const Icon(Icons.share),\r\n                onPressed: () {\r\n                  final url = postWithComments.post.fileUrl;\r\n                  Share.share(\r\n                    url,\r\n                    subject: Strings.checkOutThisPost,\r\n                  );\r\n                },\r\n              );\r\n            },\r\n            error: (error, stackTrace) {\r\n              return const SmallErrorAnimationView();\r\n            },\r\n            loading: () {\r\n              return const Center(\r\n                child: CircularProgressIndicator(),\r\n              );\r\n            },\r\n          ),\r\n            if (postWithComments.post.allowsLikes)\r\n                      LikeButton(\r\n                        postId: postId,\r\n                      ),\r\n          // delete button or no delete button if user cannot delete this post\r\n          // if (canDeletePost.value ?? false)\r\n          //   IconButton(\r\n          //     icon: const Icon(Icons.delete),\r\n          //     onPressed: () async {\r\n          //       final shouldDeletePost = await const DeletedDialog(\r\n          //               titleOfObjectToDelete: Strings.post)\r\n          //           .present(context)\r\n          //           .then((shouldDelete) => shouldDelete ?? false);\r\n          //       if (shouldDeletePost) {\r\n          //         await ref\r\n          //             .read(deletePostProvider.notifier)\r\n          //             .deletePost(post: widget.post);\r\n          //         if (mounted) {\r\n          //           Navigator.of(context).pop();\r\n          //         }\r\n          //       }\r\n          //       // delete the post now\r\n          //     },\r\n          //   )\r\n        ],\r\n      ),\r\n      body: postWithComments.when(\r\n        data: (postWithComments) {\r\n          final postId = postWithComments.post.postId;\r\n          return SingleChildScrollView(\r\n            child: Column(\r\n              crossAxisAlignment: CrossAxisAlignment.stretch,\r\n              children: [\r\n                InkWell(\r\n                  onTap: () {\r\n                    print(\"object\");\r\n                  },\r\n                  child: PostImageOrVideoView(\r\n                    post: postWithComments.post,\r\n                  ),\r\n                ),\r\n                // like and comment buttons\r\n                Row(\r\n                  mainAxisAlignment: MainAxisAlignment.start,\r\n                  children: [\r\n                    // like button if post allows liking it\r\n                    if (postWithComments.post.allowsLikes)\r\n                      LikeButton(\r\n                        postId: postId,\r\n                      ),\r\n                    // comment button if post allows commenting on it\r\n                    if (postWithComments.post.allowsComments)\r\n                      IconButton(\r\n                        icon: const Icon(\r\n                          Icons.mode_comment_outlined,\r\n                        ),\r\n                        onPressed: () {\r\n                          Navigator.of(context).push(\r\n                            MaterialPageRoute(\r\n                              builder: (context) => PostCommentsView(\r\n                                postId: postId,\r\n                              ),\r\n                            ),\r\n                          );\r\n                        },\r\n                      ),\r\n                  ],\r\n                ),\r\n                // post details (shows divider at bottom)\r\n                PostDisplayNameAndMessageView(\r\n                  post: postWithComments.post,\r\n                ),\r\n                PostDateView(\r\n                  dateTime: postWithComments.post.createdAt,\r\n                ),\r\n                const Padding(\r\n                  padding: EdgeInsets.all(8.0),\r\n                  child: Divider(\r\n                    color: Colors.white70,\r\n                  ),\r\n                ),\r\n                // comments\r\n                CompactCommentsColumn(\r\n                  comments: postWithComments.comments,\r\n                ),\r\n                // display like count\r\n                if (postWithComments.post.allowsLikes)\r\n                  Padding(\r\n                    padding: const EdgeInsets.all(8.0),\r\n                    child: Row(\r\n                      children: [\r\n                        LikesCountView(\r\n                          postId: postId,\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                // add spacing to bottom of screen\r\n                const SizedBox(\r\n                  height: 100,\r\n                ),\r\n              ],\r\n            ),\r\n          );\r\n        },\r\n        error: (error, stackTrace) {\r\n          return const ErrorAnimationView();\r\n        },\r\n        loading: () {\r\n          return const LoadingAnimationView();\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}